{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nLibrary\n\n\n\n\n\n\nCorona Store\n\n\nNeura\n\n\n\n\n\n\nSample Code\n\n\nView Sample on GitHub\n\n\n\n\n\n\nPlatforms\n\n\nAndroid\n\n\n\n\n\n\n\n\nOverview\n\n\nNeura\n increases user engagement and grows revenue. Neura uses artifical intelligence (AI) on data from multiple sources. We run this data through our machine learning algorithms to create insights on your user. We use these insights to trigger specific features in your app, provide your user with data on their behavior that they may otherwise not be aware of, and combine our insights with your own dataset to create even deeper insights on your users.\n\n\nCorona Store Activation\n\n\nIn order to use this plugin, you must activate the plugin at the \nCorona Store\n.\n\n\nSDK\n\n\nWhen you build using the Corona Simulator, the server automatically takes care of integrating the plugin into your project.\n\n\nAll you need to do is add an entry into a \nplugins\n table of your \nbuild.settings\n. The following is an example of a minimal \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        -- key is the name passed to Lua's 'require()'\n        [\nplugin.neura\n] =\n        {\n            -- required\n            publisherId = \ncom.neura\n,\n        },\n    },\n}\n\n\n\n\nSyntax\n\n\nlocal neura = require \nplugin.neura\n\n\n\n\nRegister your app with Neura\n\n\nRegister the app\n\n\nIf you haven't already, \ncreate an app\n and fill the required information.\n\n\nDeclare permissions\n\n\nHere you decide which pieces of user data you want Neura to provide you with, and declare the value you'll provide to the user in exchange for that data. Want to be alerted whenever 'userStartedDriving' is triggered? This is the place to ask for that.\n\n\nDuring the authentication process, you will pass these permission requests and value propositions to Neura, and we'll ask your users to approve them when they sign in.\n\n\nConnect to Neura\n\n\nlocal function generalNeuraListener(event)\n    print(\nNeura event: \n .. event.name)\nend\n\nlocal firebaseParams = {\n    apiKey = \nFIREBASE_API_KEY\n,\n    applicationId = \nFIREBASE_APP_ID\n,\n    gcmSenderId = \nFIREBASE_GCM_SENDER_ID\n\n}\nneura.connect({\n    appUid = \nAPP_UID\n, \n    appSecret = \nAPP_SECRET\n,\n    firebase = firebaseParams},\n    generalNeuraListener) \n\n\n\n\nAuthenticate with Neura\n\n\nAfter connecting with \nneura.connect\n, you can initiate the Neura authentication screen.\n\n\nlocal function authenticateListener(event)\n    if event.type == \nSuccess\n then\n        neura.registerFirebaseToken()\n\n        local events = { ... }\n        for i, v in ipairs(events) do\n            neura.subscribeToEvent(v, \nIdentifier_\n..v)\n        end\n    else\n        print(\nNeura authentication failed!\n)\n    end\nend\n\nneura.authenticate(authenticateListener)\n\n\n\n\nReceiving events from Neura\n\n\nThere are 2 options where you can receive events from Neura.\n\n\nYou'll need to define which way you want to receive the event, and declare it in the \"TECH INFO\" section when \ncreating an application\n.\n\n\n\n\nFirebase Cloud Messaging\n: Neura will send you an event to a service you declared on your manifest. If you don't have a server side, this is the only way you can receive an event.\n\n\nWebhook\n: Neura will send an event to the url specified, and you will have to decide what to do with the event.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#welcome", 
            "text": "Type  Library    Corona Store  Neura    Sample Code  View Sample on GitHub    Platforms  Android", 
            "title": "Welcome"
        }, 
        {
            "location": "/#overview", 
            "text": "Neura  increases user engagement and grows revenue. Neura uses artifical intelligence (AI) on data from multiple sources. We run this data through our machine learning algorithms to create insights on your user. We use these insights to trigger specific features in your app, provide your user with data on their behavior that they may otherwise not be aware of, and combine our insights with your own dataset to create even deeper insights on your users.", 
            "title": "Overview"
        }, 
        {
            "location": "/#corona-store-activation", 
            "text": "In order to use this plugin, you must activate the plugin at the  Corona Store .", 
            "title": "Corona Store Activation"
        }, 
        {
            "location": "/#sdk", 
            "text": "When you build using the Corona Simulator, the server automatically takes care of integrating the plugin into your project.  All you need to do is add an entry into a  plugins  table of your  build.settings . The following is an example of a minimal  build.settings  file:  settings =\n{\n    plugins =\n    {\n        -- key is the name passed to Lua's 'require()'\n        [ plugin.neura ] =\n        {\n            -- required\n            publisherId =  com.neura ,\n        },\n    },\n}", 
            "title": "SDK"
        }, 
        {
            "location": "/#syntax", 
            "text": "local neura = require  plugin.neura", 
            "title": "Syntax"
        }, 
        {
            "location": "/#register-your-app-with-neura", 
            "text": "", 
            "title": "Register your app with Neura"
        }, 
        {
            "location": "/#register-the-app", 
            "text": "If you haven't already,  create an app  and fill the required information.", 
            "title": "Register the app"
        }, 
        {
            "location": "/#declare-permissions", 
            "text": "Here you decide which pieces of user data you want Neura to provide you with, and declare the value you'll provide to the user in exchange for that data. Want to be alerted whenever 'userStartedDriving' is triggered? This is the place to ask for that.  During the authentication process, you will pass these permission requests and value propositions to Neura, and we'll ask your users to approve them when they sign in.", 
            "title": "Declare permissions"
        }, 
        {
            "location": "/#connect-to-neura", 
            "text": "local function generalNeuraListener(event)\n    print( Neura event:   .. event.name)\nend\n\nlocal firebaseParams = {\n    apiKey =  FIREBASE_API_KEY ,\n    applicationId =  FIREBASE_APP_ID ,\n    gcmSenderId =  FIREBASE_GCM_SENDER_ID \n}\nneura.connect({\n    appUid =  APP_UID , \n    appSecret =  APP_SECRET ,\n    firebase = firebaseParams},\n    generalNeuraListener)", 
            "title": "Connect to Neura"
        }, 
        {
            "location": "/#authenticate-with-neura", 
            "text": "After connecting with  neura.connect , you can initiate the Neura authentication screen.  local function authenticateListener(event)\n    if event.type ==  Success  then\n        neura.registerFirebaseToken()\n\n        local events = { ... }\n        for i, v in ipairs(events) do\n            neura.subscribeToEvent(v,  Identifier_ ..v)\n        end\n    else\n        print( Neura authentication failed! )\n    end\nend\n\nneura.authenticate(authenticateListener)", 
            "title": "Authenticate with Neura"
        }, 
        {
            "location": "/#receiving-events-from-neura", 
            "text": "There are 2 options where you can receive events from Neura.  You'll need to define which way you want to receive the event, and declare it in the \"TECH INFO\" section when  creating an application .   Firebase Cloud Messaging : Neura will send you an event to a service you declared on your manifest. If you don't have a server side, this is the only way you can receive an event.  Webhook : Neura will send an event to the url specified, and you will have to decide what to do with the event.", 
            "title": "Receiving events from Neura"
        }, 
        {
            "location": "/functions/", 
            "text": "Functions\n\n\naddDevice()\n\n\nOverview\n\n\nOpening a device picker screen.\n\nNote\n:\nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.addDevice(options, listener)\n\n\n\n\noptions (optional)\n\n\nTable\n.\n A table of options. If none are provided, the default device picker screen is shown. Parameters:\n\n\ndeviceName\n (optional)\n\n\nString\n.\n We'll search the deviceName in our devices list, and add it automatically. Adding a device without displaying our device picker screen. \n\n\n\n\nNote that authorization WebView required for connecting the device might still be shown. \n\n\nNote that deviceName isn't case sensitive, meaning if you pass device_name and the device's name is actually Device_naME, then it's still valid, and will be added. \n\n\n\n\nYou can get all the devices (and their names) by calling \nneura.getKnownDevices()\n \n\n\ndeviceCapabilityNames\n (optional)\n\n\nTable\n.\n Opening a device picker screen with devices has at least one capability from the deviceCapabilities list provided. We'll only show devices which your user hasn't added yet.\n\n\nFor example, if deviceCapabilities = {\"sleepQuality\", \"heartRateMeasurement\"} we'll present devices which are either sleepQuality or scale_measure (if a device is sleepQuality and heartRateMeasurement we'll present it as well). \n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\naddPlace()\n\n\nOverview\n\n\nTODO\n\n\nauthenticate()\n\n\nOverview\n\n\nAuthenticating your user with Neura : login or sign up a new user.\n\n\nSyntax\n\n\nneura.authenticate(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\nconnect()\n\n\nOverview\n\n\nConnecting to neura and firebase. Check \nIntroduction\n for more info.\n\n\nSyntax\n\n\nneura.conenct(options, listener)\n\n\n\n\noptions (required)\n\n\nTable\n.\n A table of options. Parameters:\n\n\nappUid\n (required)\n\n\nString\n.\n Neura App UID.\n\n\nappSecret\n (required)\n\n\nString\n.\n Neura App Secret.\n\n\nfirebase\n (optional)\n\n\nTable\n.\n Table of Firebase parameters to receive push notifications. Should include \napiKey\n, \napplicationId\n, and \ngcmSenderId\n keys.\n\n\nlistener (required)\n\n\nListener\n.\n General listener for all events if none is provided in the function call.\n\n\ndisconnect()\n\n\nOverview\n\n\nDisconnecting NeuraApiClient instance.\n\n\nSyntax\n\n\nneura.disconnect()\n\n\n\n\nenableAutomaticallySyncLogs()\n\n\nOverview\n\n\nA log file will be sent to our servers, in order to track issues your user might be having. \n\nBy default\n Syncing logs is disabled.\n\n\nSyntax\n\n\nneura.enableAutomaticallySyncLogs(enable)\n\n\n\n\nenable (required)\n\n\nBoolean\n.\n sending automatically logs to our server, false otherwise.\n\n\nenableNeuraHandingStateAlertMessages()\n\n\nOverview\n\n\nNeura uses multiply sensors and permission, we're tracking when :\n- (On Marshmallow os and above) A permission isn't granted by your user, and is required by Neura to work. \nFyi\n this applies only for permissions that are critical, fe - location. \n- Sensors are disabled by the user(location/wifi/bluetooth/network). \nFyi\n This only means that the sensors are disabled, not when there's no wifi available fe. \n\n\nWe'll alert for the disabled sensors whenever Neura sdk might need it.\n \n\n\nBy default Neura alert on sensors and permission is enabled.\n\n\nIf you choose to enable this feature, and let us handle a connection with your user, the flow is described below : \n\n\n\n\nNeura detects that a sensor is disabled or permission is missing and is needed at the moment. \n\n\nA notification for the user will be presented. \n\n\nIf the user presses this notification:\n\n\n\n\n3a. When permission missing: A transparent activity is opened, with the standard permission dialog. If user selects \"Never ask again\", we won't display the notification anymore.\n\n\n3b. When sensor is disabled: An intent for opening the sensors's settings will be called.\n\n\nSyntax\n\n\nneura.enableNeuraHandingStateAlertMessages(enable)\n\n\n\n\nenable (required)\n\n\nBoolean\n.\n true if you want neura to handle alerting the user on permission missing or sensors disabled, false otherwise(by default enable = true : Neura will communicate with your user when a permission is missing).\n\n\nforgetMe()\n\n\nOverview\n\n\nCalling forgetMe method will disconnect your Neura account, revoke all permissions and stop any notificatiogns between Neura and your application. \nExamples : \n\n\n\n\nforgetMe(false, listener) will do a 'silence' disconnection from neura. \n\n\nforgetMe(true, listener) will display an 'are you sure' dialog, followed by disconnection from neura if the user presses 'yes'. \n\n\n\n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.forgetMe(showAreYouSureDialog, listener)\n\n\n\n\nshowAreYouSureDialog (optional)\n\n\nBoolean\n.\n true if you want an \"are you sure\" dialog to be displayed to your user, false otherwise(\"silent\" forget me). \nDefault\n: \nfalse\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetAppPermissions()\n\n\nOverview\n\n\nReceiving the permissions an application has as declared on the \ndeveloper's console.\n\n\nSyntax\n\n\nneura.getAppPermissions(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetDailySummary()\n\n\nOverview\n\n\nReturns a user's wellness information for a single day. Daily summary is calculated from the time when the user woke on the requested date until the time the user woke on the following calendar day (date + 1 day). If Neura is unable to identify when the user woke, then daily summary is unavailable for that day.\n\n\nTo retrieve daily data, permission for dailySummary is required. \nFor more information, go to \nhere\n. \nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getDailySummary(timestamp, listener)\n\n\n\n\ntimestamp (required)\n\n\nNumber\n.\n Timestamp of the day to calculate daily summary. Can be any timestamp within the day.\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetKnownCapabilities()\n\n\nOverview\n\n\nFetching all the known capabilities for devices. \n\n\nReturns\n: a table of json objects for every capability.\n\n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nlocal capabilities = neura.getKnownCapabilities()\n\n\n\n\ngetKnownDevices()\n\n\nOverview\n\n\nFetching all the known devices Neura has to offer. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getKnownDevices(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetLocationBasedEvents()\n\n\nOverview\n\n\nReturns\n: a table of events which are location based events. \n\n\n\n\nfe : userArrivedHome - where home is a location. \n\n\nfe : userArrivedToActiveZone - where ActiveZone represents a location. \n\n\nfe : userStartedWalking - This event is NOT a location based event, and won't be in the list. \n\nNote:\n \nUser must be logged in for this method.\n\n\n\n\nSyntax\n\n\nlocal locationBasedEvents = neura.getLocationBasedEvents()\n\n\n\n\ngetMissingDataForEvent()\n\n\nOverview\n\n\nOpening missing data flow screen. Lets examine \nneura events\n : There are plenty of 'personal places' events related. Neura allows your user to add multiply places for most of the places on the list except for home. \nIf the event isn't related to home - this method will always open a picker for your user. \n\n\nfe : eventName = 'userArrivedAtAirport' - since there are plenty of airports, even if you set up an airport, you can still add more airports. \n\n\nNote that there might be several labels that's missing for each event, so, listener will be called several times, each time for a missing label. \nA boolean for success/fail will be returned in listener \n\n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getMissingDataForEvent(eventName, listener)\n\n\n\n\neventName (required)\n\n\nString\n.\n event to check if all the require fields exists.\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetPermissionStatus()\n\n\nOverview\n\n\nTODO\n\n\ngetSdkVersion()\n\n\nOverview\n\n\nReturns:\n SDK Version string\n\n\nSyntax\n\n\nlocal sdkVersion = neura.getSdkVersion()\n\n\n\n\ngetSleepProfile()\n\n\nOverview\n\n\nReturns a user's sleep information during a period of time beginning on startTimestamp and ending on endTimestamp, inclusive. \nPlease note that the lightSleep, deepSleep, and efficiency metrics are only available when the user is connected to an activity tracker.\n\n\nTo retrieve sleep data, permission for sleepData is required. \nFor more information, go to \nhere\n. \nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getSleepProfile(startTimestamp, endTimestamp, listener)\n\n\n\n\nstartTimestamp (required)\n\n\nNumber\n.\n start time for calculating sleep profile.\n\n\nendTimestamp (required)\n\n\nNumber\n.\n start time for calculating sleep profile.\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetSubscriptions()\n\n\nOverview\n\n\nReceiving all the subscriptions a user has to an application. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getSubscriptions(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetUserDetails()\n\n\nOverview\n\n\nReceiving user's details. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getUserDetails(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetUserPhone()\n\n\nOverview\n\n\nReceiving user's phone as authenticated with Neura api(\nneura.authenticate()\n) \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getUserPhone(listener)\n\n\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\ngetUserPlaceByLabelType()\n\n\nOverview\n\n\nThe user's place related address. For example, if the placeName is home, we'll return the home address. \nThere could be multiply locations for each placeName, so we're returning a list of PlaceNode. \n\n\nYou can view the full list of events here, for each event, you can extract its placeName. For example, for the event : userLeftSchoolCampus, the placeName is : SchoolCampus(case sensitive isn't mandatory). \n\nNote:\n \nUser must be logged in for this method.\n\n\nReturns:\n Table of json objects for places.\n\n\nSyntax\n\n\nlocal places = neura.getUserPlaceByLabelType(placeName)\n\n\n\n\nplaceName (required)\n\n\nString\n.\n home, work, gym, etc... \nCheck out the full list of \navailable labels\n.\n\n\ngetUserSituation()\n\n\nOverview\n\n\nReturning the user's whereabouts (locations \n activities) for specific timestamp. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.getUserSituation(timestamp, listener)\n\n\n\n\ntimestamp (required)\n\n\nNumber\n.\n Receiving the user's status and whereabouts before timestamp, during timestamp and after timestamp.\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\nhasDeviceWithCapability()\n\n\nOverview\n\n\nNote:\n \nUser must be logged in for this method.\n\n\nReturns:\n true if user has a device with the capabilityName, false otherwise.\n\n\nSyntax\n\n\nlocal hasDevice = neura.hasDeviceWithCapability(capabilityName)\n\n\n\n\ncapabilityName (required)\n\n\nString\n.\n capability name as can be fetched from \nneura.getKnownCapabilities()\n\n\nisLoggedIn()\n\n\nOverview\n\n\nCheck if user is logged in to Neura.\n\n\nReturns:\n true if the user is logged in to Neura. If user is logged in, you may call any api method in this class, if user isn't logged in, please call \nneura.authenticate()\n.\n\n\nSyntax\n\n\nlocal isLoggedIn = neura.isLoggedIn()\n\n\n\n\nisMissingDataForEvent()\n\n\nOverview\n\n\nReturning whether the event missing required fields in order for the sdk to detect when it occurs. \n\n\n\n\nfe : eventName = 'userArrivedToGym' - return true if gym exists, false otherwise. \n\n\nfe : eventName = 'userArrivedWorkFromHome' - return true if work or home(or both) doesn't exist. \n\n\nfe : eventName = 'userArrivedAtPharmacy' - return true if your user has at least 1 pharmacy in his places. \n\n\n\n\nPlus, if both home and work exists to the user, we'll consider this event as complete, there's no need to set any more data in order for the sdk to detect the event. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nlocal isMissingData = neura.isMissingDataForEvent(eventName)\n\n\n\n\neventName (required)\n\n\nString\n.\n event to check if all the require fields exists.\n\n\nregisterFirebaseToken()\n\n\nOverview\n\n\nIf you've decided to \nneura.subscribeToEvent()\n with push, you need to use \nneura.registerFirebaseToken()\n at least once in order to register your user with push. \nPlease follow our \nNeura Push integration guide\n. \n\n\nWe recommend calling this method when callback from calling \nneura.authenticate()\n is received.\n\n\nSyntax\n\n\nneura.registerFirebaseToken()\n\n\n\n\nremoveSubscription()\n\n\nOverview\n\n\nRemoving subscription to a specified event. \nNeura handles retry policy, and will try to delete subscription 3 times at the most. \nNote that this call is similar to \nneura.subscribeToEvent()\n.\n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.removeSubscription(eventName, eventIdentifier, listener)\n\n\n\n\neventName (required)\n\n\nString\n.\n Subscription to be removed from this event.\n\n\neventIdentifier (required)\n\n\nString\n.\n The event identifier will be part of the data sent to your webhook when Neura identifies an event for this subscription. It's there for you to attach a user identification, for example. The webhook identifier is the one you gave while registering the app.\n\n\nlistener (optional)\n\n\nListener\n.\n Callback to receive results. Event is sent to the default listener provided in \nneura.connect()\n if no listener is provided.\n\n\nsendFeedbackOnEvent()\n\n\nOverview\n\n\nSending Neura a feedback for an event received. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.sendFeedbackOnEvent(neuraId, approved)\n\n\n\n\nneuraId (required)\n\n\nString\n.\n neuraID received on your listener which catches the event by fcm or webhook.\n\n\napproved (required)\n\n\nBoolean\n.\n true if user approved that the event occurred, false otherwise.\n\n\nshouldSubscribeToEvent()\n\n\nOverview\n\n\nReturns:\n true if \nneura.subscribeToEvent()\n should be called to eventName, false when the eventName is not valid, or, the eventName is a service (for example : dailyActivitySummary) and in this case - there's no need to subscribe to services, you can request services without subscribing, as long as they're declared on the permissions of your application. \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nlocal shouldSubscribe = neura.shouldSubscribeToEvent(eventName)\n\n\n\n\neventName (required)\n\n\nString\n.\n As taken from events listed on Neura dev site.\n\n\nsimulateAnEvent()\n\n\nOverview\n\n\nSimulating generating an event \n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.simulateAnEvent()\n\n\n\n\nsubscribeToEvent()\n\n\nOverview\n\n\nAdding subscription for a specified event. \nNeura handles retry policy, and will try to subscribe 3 times at the most. \nNote that this call is similar to \nneura.removeSubscription()\n.\n\nNote:\n \nUser must be logged in for this method.\n\n\nSyntax\n\n\nneura.subscribeToEvent(eventName, eventIdentifier, listener)\n\n\n\n\neventName (required)\n\n\nString\n.\n Subscription to be added to this event.\n\n\neventIdentifier (required)\n\n\nString\n.\n The event identifier will be part of the data sent to your webhook when Neura identifies an event for this subscription. It's there for you to attach a user identification, for example. The webhook identifier is the one you gave while registering the app.", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#adddevice", 
            "text": "", 
            "title": "addDevice()"
        }, 
        {
            "location": "/functions/#overview", 
            "text": "Opening a device picker screen. Note : User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax", 
            "text": "neura.addDevice(options, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#options-optional", 
            "text": "Table .  A table of options. If none are provided, the default device picker screen is shown. Parameters:", 
            "title": "options (optional)"
        }, 
        {
            "location": "/functions/#devicename-optional", 
            "text": "String .  We'll search the deviceName in our devices list, and add it automatically. Adding a device without displaying our device picker screen.    Note that authorization WebView required for connecting the device might still be shown.   Note that deviceName isn't case sensitive, meaning if you pass device_name and the device's name is actually Device_naME, then it's still valid, and will be added.    You can get all the devices (and their names) by calling  neura.getKnownDevices()", 
            "title": "deviceName (optional)"
        }, 
        {
            "location": "/functions/#devicecapabilitynames-optional", 
            "text": "Table .  Opening a device picker screen with devices has at least one capability from the deviceCapabilities list provided. We'll only show devices which your user hasn't added yet.  For example, if deviceCapabilities = {\"sleepQuality\", \"heartRateMeasurement\"} we'll present devices which are either sleepQuality or scale_measure (if a device is sleepQuality and heartRateMeasurement we'll present it as well).", 
            "title": "deviceCapabilityNames (optional)"
        }, 
        {
            "location": "/functions/#listener-optional", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#addplace", 
            "text": "", 
            "title": "addPlace()"
        }, 
        {
            "location": "/functions/#overview_1", 
            "text": "TODO", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#authenticate", 
            "text": "", 
            "title": "authenticate()"
        }, 
        {
            "location": "/functions/#overview_2", 
            "text": "Authenticating your user with Neura : login or sign up a new user.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_1", 
            "text": "neura.authenticate(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_1", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#connect", 
            "text": "", 
            "title": "connect()"
        }, 
        {
            "location": "/functions/#overview_3", 
            "text": "Connecting to neura and firebase. Check  Introduction  for more info.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_2", 
            "text": "neura.conenct(options, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#options-required", 
            "text": "Table .  A table of options. Parameters:", 
            "title": "options (required)"
        }, 
        {
            "location": "/functions/#appuid-required", 
            "text": "String .  Neura App UID.", 
            "title": "appUid (required)"
        }, 
        {
            "location": "/functions/#appsecret-required", 
            "text": "String .  Neura App Secret.", 
            "title": "appSecret (required)"
        }, 
        {
            "location": "/functions/#firebase-optional", 
            "text": "Table .  Table of Firebase parameters to receive push notifications. Should include  apiKey ,  applicationId , and  gcmSenderId  keys.", 
            "title": "firebase (optional)"
        }, 
        {
            "location": "/functions/#listener-required", 
            "text": "Listener .  General listener for all events if none is provided in the function call.", 
            "title": "listener (required)"
        }, 
        {
            "location": "/functions/#disconnect", 
            "text": "", 
            "title": "disconnect()"
        }, 
        {
            "location": "/functions/#overview_4", 
            "text": "Disconnecting NeuraApiClient instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_3", 
            "text": "neura.disconnect()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#enableautomaticallysynclogs", 
            "text": "", 
            "title": "enableAutomaticallySyncLogs()"
        }, 
        {
            "location": "/functions/#overview_5", 
            "text": "A log file will be sent to our servers, in order to track issues your user might be having.  By default  Syncing logs is disabled.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_4", 
            "text": "neura.enableAutomaticallySyncLogs(enable)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#enable-required", 
            "text": "Boolean .  sending automatically logs to our server, false otherwise.", 
            "title": "enable (required)"
        }, 
        {
            "location": "/functions/#enableneurahandingstatealertmessages", 
            "text": "", 
            "title": "enableNeuraHandingStateAlertMessages()"
        }, 
        {
            "location": "/functions/#overview_6", 
            "text": "Neura uses multiply sensors and permission, we're tracking when :\n- (On Marshmallow os and above) A permission isn't granted by your user, and is required by Neura to work.  Fyi  this applies only for permissions that are critical, fe - location. \n- Sensors are disabled by the user(location/wifi/bluetooth/network).  Fyi  This only means that the sensors are disabled, not when there's no wifi available fe.   We'll alert for the disabled sensors whenever Neura sdk might need it.    By default Neura alert on sensors and permission is enabled.  If you choose to enable this feature, and let us handle a connection with your user, the flow is described below :    Neura detects that a sensor is disabled or permission is missing and is needed at the moment.   A notification for the user will be presented.   If the user presses this notification:   3a. When permission missing: A transparent activity is opened, with the standard permission dialog. If user selects \"Never ask again\", we won't display the notification anymore.  3b. When sensor is disabled: An intent for opening the sensors's settings will be called.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_5", 
            "text": "neura.enableNeuraHandingStateAlertMessages(enable)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#enable-required_1", 
            "text": "Boolean .  true if you want neura to handle alerting the user on permission missing or sensors disabled, false otherwise(by default enable = true : Neura will communicate with your user when a permission is missing).", 
            "title": "enable (required)"
        }, 
        {
            "location": "/functions/#forgetme", 
            "text": "", 
            "title": "forgetMe()"
        }, 
        {
            "location": "/functions/#overview_7", 
            "text": "Calling forgetMe method will disconnect your Neura account, revoke all permissions and stop any notificatiogns between Neura and your application. \nExamples :    forgetMe(false, listener) will do a 'silence' disconnection from neura.   forgetMe(true, listener) will display an 'are you sure' dialog, followed by disconnection from neura if the user presses 'yes'.    Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_6", 
            "text": "neura.forgetMe(showAreYouSureDialog, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#showareyousuredialog-optional", 
            "text": "Boolean .  true if you want an \"are you sure\" dialog to be displayed to your user, false otherwise(\"silent\" forget me).  Default :  false", 
            "title": "showAreYouSureDialog (optional)"
        }, 
        {
            "location": "/functions/#listener-optional_2", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getapppermissions", 
            "text": "", 
            "title": "getAppPermissions()"
        }, 
        {
            "location": "/functions/#overview_8", 
            "text": "Receiving the permissions an application has as declared on the  developer's console.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_7", 
            "text": "neura.getAppPermissions(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_3", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getdailysummary", 
            "text": "", 
            "title": "getDailySummary()"
        }, 
        {
            "location": "/functions/#overview_9", 
            "text": "Returns a user's wellness information for a single day. Daily summary is calculated from the time when the user woke on the requested date until the time the user woke on the following calendar day (date + 1 day). If Neura is unable to identify when the user woke, then daily summary is unavailable for that day.  To retrieve daily data, permission for dailySummary is required. \nFor more information, go to  here .  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_8", 
            "text": "neura.getDailySummary(timestamp, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#timestamp-required", 
            "text": "Number .  Timestamp of the day to calculate daily summary. Can be any timestamp within the day.", 
            "title": "timestamp (required)"
        }, 
        {
            "location": "/functions/#listener-optional_4", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getknowncapabilities", 
            "text": "", 
            "title": "getKnownCapabilities()"
        }, 
        {
            "location": "/functions/#overview_10", 
            "text": "Fetching all the known capabilities for devices.   Returns : a table of json objects for every capability.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_9", 
            "text": "local capabilities = neura.getKnownCapabilities()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#getknowndevices", 
            "text": "", 
            "title": "getKnownDevices()"
        }, 
        {
            "location": "/functions/#overview_11", 
            "text": "Fetching all the known devices Neura has to offer.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_10", 
            "text": "neura.getKnownDevices(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_5", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getlocationbasedevents", 
            "text": "", 
            "title": "getLocationBasedEvents()"
        }, 
        {
            "location": "/functions/#overview_12", 
            "text": "Returns : a table of events which are location based events.    fe : userArrivedHome - where home is a location.   fe : userArrivedToActiveZone - where ActiveZone represents a location.   fe : userStartedWalking - This event is NOT a location based event, and won't be in the list.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_11", 
            "text": "local locationBasedEvents = neura.getLocationBasedEvents()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#getmissingdataforevent", 
            "text": "", 
            "title": "getMissingDataForEvent()"
        }, 
        {
            "location": "/functions/#overview_13", 
            "text": "Opening missing data flow screen. Lets examine  neura events  : There are plenty of 'personal places' events related. Neura allows your user to add multiply places for most of the places on the list except for home. \nIf the event isn't related to home - this method will always open a picker for your user.   fe : eventName = 'userArrivedAtAirport' - since there are plenty of airports, even if you set up an airport, you can still add more airports.   Note that there might be several labels that's missing for each event, so, listener will be called several times, each time for a missing label. \nA boolean for success/fail will be returned in listener   Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_12", 
            "text": "neura.getMissingDataForEvent(eventName, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#eventname-required", 
            "text": "String .  event to check if all the require fields exists.", 
            "title": "eventName (required)"
        }, 
        {
            "location": "/functions/#listener-optional_6", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getpermissionstatus", 
            "text": "", 
            "title": "getPermissionStatus()"
        }, 
        {
            "location": "/functions/#overview_14", 
            "text": "TODO", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#getsdkversion", 
            "text": "", 
            "title": "getSdkVersion()"
        }, 
        {
            "location": "/functions/#overview_15", 
            "text": "Returns:  SDK Version string", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_13", 
            "text": "local sdkVersion = neura.getSdkVersion()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#getsleepprofile", 
            "text": "", 
            "title": "getSleepProfile()"
        }, 
        {
            "location": "/functions/#overview_16", 
            "text": "Returns a user's sleep information during a period of time beginning on startTimestamp and ending on endTimestamp, inclusive. \nPlease note that the lightSleep, deepSleep, and efficiency metrics are only available when the user is connected to an activity tracker.  To retrieve sleep data, permission for sleepData is required. \nFor more information, go to  here .  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_14", 
            "text": "neura.getSleepProfile(startTimestamp, endTimestamp, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#starttimestamp-required", 
            "text": "Number .  start time for calculating sleep profile.", 
            "title": "startTimestamp (required)"
        }, 
        {
            "location": "/functions/#endtimestamp-required", 
            "text": "Number .  start time for calculating sleep profile.", 
            "title": "endTimestamp (required)"
        }, 
        {
            "location": "/functions/#listener-optional_7", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getsubscriptions", 
            "text": "", 
            "title": "getSubscriptions()"
        }, 
        {
            "location": "/functions/#overview_17", 
            "text": "Receiving all the subscriptions a user has to an application.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_15", 
            "text": "neura.getSubscriptions(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_8", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getuserdetails", 
            "text": "", 
            "title": "getUserDetails()"
        }, 
        {
            "location": "/functions/#overview_18", 
            "text": "Receiving user's details.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_16", 
            "text": "neura.getUserDetails(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_9", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getuserphone", 
            "text": "", 
            "title": "getUserPhone()"
        }, 
        {
            "location": "/functions/#overview_19", 
            "text": "Receiving user's phone as authenticated with Neura api( neura.authenticate() )  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_17", 
            "text": "neura.getUserPhone(listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#listener-optional_10", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#getuserplacebylabeltype", 
            "text": "", 
            "title": "getUserPlaceByLabelType()"
        }, 
        {
            "location": "/functions/#overview_20", 
            "text": "The user's place related address. For example, if the placeName is home, we'll return the home address. \nThere could be multiply locations for each placeName, so we're returning a list of PlaceNode.   You can view the full list of events here, for each event, you can extract its placeName. For example, for the event : userLeftSchoolCampus, the placeName is : SchoolCampus(case sensitive isn't mandatory).  Note:   User must be logged in for this method.  Returns:  Table of json objects for places.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_18", 
            "text": "local places = neura.getUserPlaceByLabelType(placeName)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#placename-required", 
            "text": "String .  home, work, gym, etc... \nCheck out the full list of  available labels .", 
            "title": "placeName (required)"
        }, 
        {
            "location": "/functions/#getusersituation", 
            "text": "", 
            "title": "getUserSituation()"
        }, 
        {
            "location": "/functions/#overview_21", 
            "text": "Returning the user's whereabouts (locations   activities) for specific timestamp.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_19", 
            "text": "neura.getUserSituation(timestamp, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#timestamp-required_1", 
            "text": "Number .  Receiving the user's status and whereabouts before timestamp, during timestamp and after timestamp.", 
            "title": "timestamp (required)"
        }, 
        {
            "location": "/functions/#listener-optional_11", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#hasdevicewithcapability", 
            "text": "", 
            "title": "hasDeviceWithCapability()"
        }, 
        {
            "location": "/functions/#overview_22", 
            "text": "Note:   User must be logged in for this method.  Returns:  true if user has a device with the capabilityName, false otherwise.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_20", 
            "text": "local hasDevice = neura.hasDeviceWithCapability(capabilityName)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#capabilityname-required", 
            "text": "String .  capability name as can be fetched from  neura.getKnownCapabilities()", 
            "title": "capabilityName (required)"
        }, 
        {
            "location": "/functions/#isloggedin", 
            "text": "", 
            "title": "isLoggedIn()"
        }, 
        {
            "location": "/functions/#overview_23", 
            "text": "Check if user is logged in to Neura.  Returns:  true if the user is logged in to Neura. If user is logged in, you may call any api method in this class, if user isn't logged in, please call  neura.authenticate() .", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_21", 
            "text": "local isLoggedIn = neura.isLoggedIn()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#ismissingdataforevent", 
            "text": "", 
            "title": "isMissingDataForEvent()"
        }, 
        {
            "location": "/functions/#overview_24", 
            "text": "Returning whether the event missing required fields in order for the sdk to detect when it occurs.    fe : eventName = 'userArrivedToGym' - return true if gym exists, false otherwise.   fe : eventName = 'userArrivedWorkFromHome' - return true if work or home(or both) doesn't exist.   fe : eventName = 'userArrivedAtPharmacy' - return true if your user has at least 1 pharmacy in his places.    Plus, if both home and work exists to the user, we'll consider this event as complete, there's no need to set any more data in order for the sdk to detect the event.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_22", 
            "text": "local isMissingData = neura.isMissingDataForEvent(eventName)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#eventname-required_1", 
            "text": "String .  event to check if all the require fields exists.", 
            "title": "eventName (required)"
        }, 
        {
            "location": "/functions/#registerfirebasetoken", 
            "text": "", 
            "title": "registerFirebaseToken()"
        }, 
        {
            "location": "/functions/#overview_25", 
            "text": "If you've decided to  neura.subscribeToEvent()  with push, you need to use  neura.registerFirebaseToken()  at least once in order to register your user with push. \nPlease follow our  Neura Push integration guide .   We recommend calling this method when callback from calling  neura.authenticate()  is received.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_23", 
            "text": "neura.registerFirebaseToken()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#removesubscription", 
            "text": "", 
            "title": "removeSubscription()"
        }, 
        {
            "location": "/functions/#overview_26", 
            "text": "Removing subscription to a specified event. \nNeura handles retry policy, and will try to delete subscription 3 times at the most. \nNote that this call is similar to  neura.subscribeToEvent() . Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_24", 
            "text": "neura.removeSubscription(eventName, eventIdentifier, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#eventname-required_2", 
            "text": "String .  Subscription to be removed from this event.", 
            "title": "eventName (required)"
        }, 
        {
            "location": "/functions/#eventidentifier-required", 
            "text": "String .  The event identifier will be part of the data sent to your webhook when Neura identifies an event for this subscription. It's there for you to attach a user identification, for example. The webhook identifier is the one you gave while registering the app.", 
            "title": "eventIdentifier (required)"
        }, 
        {
            "location": "/functions/#listener-optional_12", 
            "text": "Listener .  Callback to receive results. Event is sent to the default listener provided in  neura.connect()  if no listener is provided.", 
            "title": "listener (optional)"
        }, 
        {
            "location": "/functions/#sendfeedbackonevent", 
            "text": "", 
            "title": "sendFeedbackOnEvent()"
        }, 
        {
            "location": "/functions/#overview_27", 
            "text": "Sending Neura a feedback for an event received.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_25", 
            "text": "neura.sendFeedbackOnEvent(neuraId, approved)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#neuraid-required", 
            "text": "String .  neuraID received on your listener which catches the event by fcm or webhook.", 
            "title": "neuraId (required)"
        }, 
        {
            "location": "/functions/#approved-required", 
            "text": "Boolean .  true if user approved that the event occurred, false otherwise.", 
            "title": "approved (required)"
        }, 
        {
            "location": "/functions/#shouldsubscribetoevent", 
            "text": "", 
            "title": "shouldSubscribeToEvent()"
        }, 
        {
            "location": "/functions/#overview_28", 
            "text": "Returns:  true if  neura.subscribeToEvent()  should be called to eventName, false when the eventName is not valid, or, the eventName is a service (for example : dailyActivitySummary) and in this case - there's no need to subscribe to services, you can request services without subscribing, as long as they're declared on the permissions of your application.  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_26", 
            "text": "local shouldSubscribe = neura.shouldSubscribeToEvent(eventName)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#eventname-required_3", 
            "text": "String .  As taken from events listed on Neura dev site.", 
            "title": "eventName (required)"
        }, 
        {
            "location": "/functions/#simulateanevent", 
            "text": "", 
            "title": "simulateAnEvent()"
        }, 
        {
            "location": "/functions/#overview_29", 
            "text": "Simulating generating an event  Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_27", 
            "text": "neura.simulateAnEvent()", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#subscribetoevent", 
            "text": "", 
            "title": "subscribeToEvent()"
        }, 
        {
            "location": "/functions/#overview_30", 
            "text": "Adding subscription for a specified event. \nNeura handles retry policy, and will try to subscribe 3 times at the most. \nNote that this call is similar to  neura.removeSubscription() . Note:   User must be logged in for this method.", 
            "title": "Overview"
        }, 
        {
            "location": "/functions/#syntax_28", 
            "text": "neura.subscribeToEvent(eventName, eventIdentifier, listener)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/#eventname-required_4", 
            "text": "String .  Subscription to be added to this event.", 
            "title": "eventName (required)"
        }, 
        {
            "location": "/functions/#eventidentifier-required_1", 
            "text": "String .  The event identifier will be part of the data sent to your webhook when Neura identifies an event for this subscription. It's there for you to attach a user identification, for example. The webhook identifier is the one you gave while registering the app.", 
            "title": "eventIdentifier (required)"
        }, 
        {
            "location": "/events/", 
            "text": "Events\n\n\nEVENT_TYPE\n\n\nEvent Description\n\n\nProperties\n\n\nevent.name\n\n\nString\n.\n \"EVENT_NAME\"\n\n\nevent.type\n\n\nString\n.\n \"EVENT_TYPE\"\n\n\nevent.isError\n\n\nBoolean\n.\n Value indicating whether an error occurred.\n\n\nevent.error\n\n\nString\n.\n If event.isError is \ntrue\n, this is a string value stating the reason.", 
            "title": "Events"
        }, 
        {
            "location": "/events/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/events/#event_type", 
            "text": "Event Description", 
            "title": "EVENT_TYPE"
        }, 
        {
            "location": "/events/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/events/#eventname", 
            "text": "String .  \"EVENT_NAME\"", 
            "title": "event.name"
        }, 
        {
            "location": "/events/#eventtype", 
            "text": "String .  \"EVENT_TYPE\"", 
            "title": "event.type"
        }, 
        {
            "location": "/events/#eventiserror", 
            "text": "Boolean .  Value indicating whether an error occurred.", 
            "title": "event.isError"
        }, 
        {
            "location": "/events/#eventerror", 
            "text": "String .  If event.isError is  true , this is a string value stating the reason.", 
            "title": "event.error"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\nTwilio Plugin for Corona SDK is developed, documented, and maitained by Stiven Deleur.\n\n\nSupport\n\n\n\n\nE-mail\n\n\nCorona Forums\n\n\n\n\nSponsors\n\n\n\n\nPlugin sponsored by \n\n\n\n\nThank you!", 
            "title": "About"
        }, 
        {
            "location": "/about/#about", 
            "text": "Twilio Plugin for Corona SDK is developed, documented, and maitained by Stiven Deleur.", 
            "title": "About"
        }, 
        {
            "location": "/about/#support", 
            "text": "E-mail  Corona Forums", 
            "title": "Support"
        }, 
        {
            "location": "/about/#sponsors", 
            "text": "Plugin sponsored by    Thank you!", 
            "title": "Sponsors"
        }
    ]
}